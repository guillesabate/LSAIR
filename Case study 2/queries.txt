//1-
match (n:FlightAttendant)-[:GOES]->(f:Flight)<-[:GOES]-(n2:FlightAttendant) MERGE (n)-[:COLLEAGUE]-(n2)
return n, f, n2

//2-
match 
(n:FlightAttendant)-[:SPEAKS]->(l:Language)<-[:SPEAKS]-(n2:FlightAttendant),
(n)-[:GOES]->(f:Flight)-->(a:Airport)<--(f2:Flight)<-[:GOES]-(n2),
(n)-[c:COLLEAGUE]-(n2)
where f <> f2 and c IS NULL MERGE (n)-[:ACQUAINTANCE]-(n2)
return n, l, n2, a, f2, f

//3- 
match 
(n:FlightAttendant)-[:GOES]->(f:Flight)<-[:FLIGHTS]-(n2:Pilot),
(n)-[:SPEAKS]->(l:Language)<-[:SPEAKS]-(n2)
where (n.years_working - n2.years_working < 10) MERGE (n2)-[:AFFAIR]-(n)
return n, n2,f, l

//4-
match (n:FlightAttendant)-[a:AFFAIR]-(n2:Pilot),
(n)-->(l:Language)<--(n2) 
with count(a) as affairs,l as language return affairs, language
order by affairs desc

//5-
MATCH (n:Pilot)-[a:AFFAIR]-(n2:FlightAttendant)-[:COLLEAGUE]-(n3:FlightAttendant)-[a2:AFFAIR]-(p) 
where n2<>n3 
RETURN p

//6-
match (n3)-[a:AFFAIR]-(n:Pilot)-[a2:AFFAIR]-(n4), p = shortestPath((n)-[:AFFAIR|ACQUAINTANCE|COLLEAGUE*]-(n2:Pilot))
where n<>n2 and n3<>n4
return p
